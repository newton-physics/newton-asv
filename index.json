{"project": "newton", "project_url": "https://github.com/newton-physics/newton", "show_commit_url": "https://github.com/newton-physics/newton/commit/", "hash_length": 8, "revision_to_hash": {"3": "0dedd28562b5a16ca124bca598bf4ee802bb0bc0", "18": "f23e6733c846d5ae32076cdd36bc568f6ff2ba24", "21": "c18fce121561b068d72a46d55e03a59e711dcf92", "27": "5477d002884bebe95dde38512770c075fe740e08", "59": "5a277df14a13c3b508ac5579a0ecc90c342cf37c", "103": "b22f94d48d29a4596f9820ddb0916fb65f5dcdbe", "105": "7e7b69d60fb8103e78a99d07645af6dca2e96912", "118": "192795096851a5b7b8dc81d210c22774ba55196b", "123": "8ab75522fbcf9f0f180e611567beaddb00df507c", "152": "9b1387686e6fe433c9f716dc2416669adec530e2", "282": "5eb633f3f3d2b56d897a6602d6bb3075d62b348e", "356": "73bc5b62caaaade331a5543dcf03d23dcbcb4bb8", "363": "47a11f5cd528850489d5c30995c0621df795a8c6", "373": "3dc8d4c4eec5bd862583a93913c92df1bb9f2609", "375": "a93d385712b9e6a8495c2f024cc390677dd777b6", "451": "257c45236b12a224c0b975d0235f24d6b46bb2a0", "464": "bae022b222c8f032989740a301cce2f1388e03c8", "474": "1f175bf5ad79f71cd29d8d222402e920858fe725", "579": "2e2246621b32dea34fb495625e9ce582c98a7ceb", "693": "aa1f41c4837585674cb8c1fe26bf26d19ae7f49d", "713": "05a4eb2a572f3582ac5969da6968028dfb622636", "719": "4951229a0cf5b148ecbadbebd1fb431281f252ba", "725": "96eaea8f9d38f666646fad5c4d94b3ccf270ba23", "821": "4a51f346a9f6c2dc2e4537c5923cc576169e556b", "825": "1132cfd61f4a75ac9739bdee5d9bfd85e1d89f25", "830": "45bcfea04632479ecdb83227a460e9fc61376040", "867": "13ebfec0d05eb09e2b24b629aec5d00703e3098f", "883": "628783bebd68da7852f5922cba254bfa0a215432", "890": "e9dfe8a3a6b4868aa691665c47aafb16dd128c3b", "924": "9edde0f8b60b61c5d1f413ad430d6f9d58cafdce", "952": "ce8e33b00844cab7ec8b2632cdde3602e12135d8", "968": "366a36878424f1a37139ce8fcade652d1a4aafe0", "970": "962498fc850bb7c6ce8713a2962247cf67606589", "980": "fb005a3e79625aeb75e76c3f73eb54e89031e02f", "987": "519762a1773e197152d7319c5fbaa16f474e3013", "1001": "9bddf0e1b61b1f6bb4a694890ec55b84ab3279c6", "1004": "7e7379975658357c69648fc839421fc49481d9f8", "1013": "963b0a35659e55dedc98c77383922c6e38018089", "1015": "a420654c48f26c1ff9535510f5709d5372bb93a6", "1138": "f92cd5cb7490474020528d4a499950e1aab1cddd", "1148": "ca6286412b4162b2abc97e2c7cfd8996f6244311", "1153": "fd992c1d3c059b28886aa497d4478bd091032191", "1216": "771fd368a2e3c4122487be8d7bfa48f209c8c5f3", "1250": "7832bca91da5f37c19145da008cb1858e409a6e7", "1258": "cf64c5a2ec952c176042ee9a3c11a3f72148db29", "1279": "abf2c417d116cc5b15ebb61c54846914886c3a8e", "1315": "988b25122a4ad44dd898da06c847a2940b549c65", "1334": "96164c8672faec392aa28fc6eaf81e04068aa4cb", "1358": "6162387b52d1b08b786e26263924b490b0e86fe9", "1361": "af93df8eb20a008387e516b95c4225b52336ca0c", "1395": "11f31bc6be80653879dda320c0083b6569f978b1", "1406": "eb8623ec052e1dab3bc17af91aac2e7fab3518ff", "1420": "c4687c53c59b1a165f6218e45d316535c28ead15", "1475": "37a9800c3f2ab727864403b4fcf5e162ad768c97", "1478": "d9c390aa1e4daafd37c9c4192aa338c763b6dd80", "1484": "f09bf2de573e76a0a8b2b0e28fe6611df85bb251", "1488": "1473199c6e2457a324c8d2700266af8b39363a8b", "1492": "135dc9b3c98e5d0feadea8d370bba6e9c6e29677", "1496": "669b27bca4bf7f6ccfa5ed66a78ecc4707fe9d42", "1498": "7bb37b84a99568c0b39eae09d8917181e900f27b", "1501": "4ad64ba7cc8c04bcef9a2d00d6e58380dd73dc39", "1504": "18f2b9a9e30c0d07bfa875989a293700011fbcf6", "1512": "399d549d6bdb83ffffc37c938d74ee25310780d5", "1526": "266ad71bfe97759e863bf5ebadd60577fc8370de", "1531": "e649ced907f0e838a01232fead668431790eda9e", "1533": "69cb29114f648c71543e15554f80fef93ad14630", "1535": "7017f315134290f08370e7ff053e67655111ec00", "1538": "ee09df0312a15ba7fb7d79ab0bc12152869a055b", "1543": "beec48955b7a43cec365918f59e0e058d75bb426", "1578": "df80c62e4fe1b880e3e928e1c239dff7046f3cd7", "1586": "c33caa8bff0a6ed84ea13808aed2ae974e59b814", "1588": "4e44c453e314cd6678f1415d705187377da67654", "1593": "cda9544f07d58bfb9b47bb97d99b7ad808e5df9c", "1600": "6fc6074ee4b0536d4e9e53fd1418d5496da158f7", "1611": "c1602a77c5d98bb83fc4b5c03b6950826255a2fe", "1613": "d0a5d74cfc197a00b5e04ad76d890d39ff68896c", "1616": "de96e4eba4f662160023c5ffb6849f1df47457cb", "1617": "e251081f5bd36c788c2b8e1db1f6cffab677c5d0", "1623": "081570032966c925b47232218ebeaa1f4af8d768", "1633": "51edd793bc2632cba209f2d72b37ea80f836b48f", "1638": "0ff50442fb1eae545ca4e654ea3a72305e5f339f", "1639": "e37f0d95588cad16745ef11d5902ca18e65953ec", "1645": "d45257194e65952a3f1b8d4dbe3307f5c4ec0825", "1665": "acabe82ade79d231e71d17d5a43b5e7ba3597fdb", "1669": "5091199446bc9f3551b6fe17c8925dab33116d3c", "1671": "d050062c80605021a0c82b6af1bffe413201bf2c", "1674": "abf0add882456d9570865dbdd998ac0f42f90bcc", "1727": "fddb0f4adb506ea9424ed837d84f79c854550086", "1730": "b3be66872e076c24905d82840669739906d5e384", "1732": "67a17ffb42269de277f09aaaeb071d69d82f153b", "1746": "0272b9501efe6900d9c7e4bd8152e81ff1492693", "1788": "a662f7b568ae36b010c535bf851a5bce120f97e4", "1805": "ac124ca88d28457e7003203f55ac3cc29d0a2b5c", "1807": "5b18850fd8243e4c707b596880c01c1966e5168e", "1812": "3ec30d8425760095976aee58f97d6dea6c5609be", "1834": "036222c1577264afeb20e7e1649efcd77294c8dc", "1842": "3b112dd39ad49eb14bf8c11e5fd6279b4d1d0260", "1855": "7c59666a394c1a813b1faa0b6795cae7d35e55d6", "1860": "6040f125bbb907c1e12457b5667a118a5e7af9bd", "1862": "a406a9507c2782ab6600d2604257ef15eaf3dbd7", "1864": "154dbb1e1d5d7235c3261eeee4f3964c95dbc6a5", "1867": "ed05bc8ee405ed7f81e131f66c40cb0842b611eb", "1871": "d13353f8bf43cf4d2942ccdb5ddb951028687b65", "1880": "900cbd8a84d2cb07ebe83835780ea6b1a6809412", "1895": "f701455313df2ee83ec881d6612657882f2472a0", "1907": "10b85b636768ede79d63a024908571e1759ed813", "1916": "ee6f9a7034556b708317dc3b2efdd96ac93830c0", "1924": "a390cdaf794c853e524cd0f66592e0a849b92425", "1928": "b1dc22e96dbfc899c93e7e26ef65a482fd779820", "1932": "57fe555e36bc4ef7d9c8808145c518654533ff66", "1942": "a15c454fae5019fc374c32638aa5afeba05c6f55", "1945": "d898d06dc520c8e74b78031e21e07ca59ade605d", "1962": "b40af7391bdc12369355d4b26f9a12014878e1d5", "2003": "bb73e84477acebfb91636aaf8f53f6b8166bd63b", "2025": "7f6229ed36fd897215780df4d8fc52583d9c0b31", "2058": "11a7403ab9f661c9b6cf8e04d348ceecd8db26c6", "2208": "d64ce3549b479c6899d53730540eaaec4bedf388", "2218": "fc202efab8eba718792e1443dd5fe0caa6de484e", "2224": "3f9434ff44a12a05d00a8d14a5ff34133160ef2c", "2264": "61b3538f5c6817cc08df3eb27311b1dcf128c7ca", "2318": "79fff09f24b5bb6ac2941c98fac140618d5fc034", "2348": "a1ddfe5c04527b51d711170e067e671ab64c0c02", "2382": "24505b496b825375a12c2648d0cbf8d7210ac09a", "2384": "5e55801268170d3ec07689169904dd8eca13217a", "2403": "e15cac7f3458c3d99653301dbd6844a51e5874d8", "2429": "9d1b1d1d551c9ade7a019b74c849b60e866f8785", "2441": "f671607e78dd13e8efb80ba19a759f00fb2f221a", "2493": "f3c768f32ee0e09f8697c1e3da3c4ed82c959e8c", "2495": "a11c534614f3a8e53381e3bf41fe3ac87dc4bf93", "2503": "70a6bfcb3739548a295465072371caaf2565029e", "2624": "cfc1d75d6d8de41937326945f8e9e7e7d728a408", "2629": "a32ad9dc27f38027974f05a3c2c93c63428f7d66", "2632": "a8947bc2b5aece8b09da4b9efdfabff9f063f938", "2643": "a34d3df06a165272f66a1ee69a36c8987f5d0a89", "2676": "79db8d8da8956446737ef646f179f9c83d9ea8d6", "2684": "1d70cf220c926a11f0538d620141e2ced8c5ad4a", "2686": "ace430de890d344974609443d1bf58a620026968", "2709": "0be2918d5ec658a364b4acf7a088d84772cd1c02", "2712": "8b9ee1ada745a642b7e24d16025cccdcad4304db", "2719": "a943c9089bd4ae1e1acac430331723570a039244", "2754": "438a146f0eeb051e233de21a68d1427c017bbc1c", "2758": "74a8b5155ffaba33c468095e9de7b25fd9b5b61c", "2763": "1978c1700d29545291077005064e9b3658b221d2", "2768": "89366ca162868de83abba611bb7a784e59f7131a", "2856": "7d171db05f2641bab9ed2116e21f0194d0bfb646", "2864": "2796ea6996da7509a777afe49e596316a87c9f63", "2872": "969154fcd2feb4e094d272da5c79bacfa39971e2", "2905": "bba32a7948967164180692ed7e08c479fbe58c2d", "2913": "27f3bda0954036025fe592a8b5becfb974791431", "2929": "c341e330d7ed277750892bdb1941ea1ceca1a62a", "2936": "e9b094a28febff9489f49ef4f59cd4632235c2a6", "2974": "20339d3bf498274949a972d85ce9f18dfc0f5546", "2982": "ad0ce6a6be0101fa9a3f38411101d0c3c6de0b11", "2990": "e956d331540f61748753e547b179cb1a3cb54447", "3001": "d5e94df9a053b1668cf3a52630733f6e3f9c6afa", "3006": "d324dab477c507e8acbdf18d3bdab5458fc20cf9", "3020": "a4add7c2f53e77b6c92d81234a408d3219a9ef03", "3031": "e5a7cfa02c190eec0f6e94c3844b115b5870792a", "3070": "669325b7460b68cc260fce413d1d2e99625fc373", "3073": "7867570e8e17b8cf382740bd45b3f50453821cda", "3076": "716af4046af4e1c8a456f7a2055bdcad9c67ff48", "3089": "383c759765d3c86736f1deed506bea705c78cbd6", "3099": "8b881819c7af61522d890358e014218c10b00310", "3102": "56fc23c462d2508ef27327be75bf369994870c8b", "3107": "5e1cb4a9d2d6e4349964ff9a88c386807826026e", "3137": "7bb973766fb7a864d4a162142099927631f9097c", "3194": "08ff1bfd02406c6b1d4a2d4d1aed7ddcf664024d", "3222": "c0546580e5a5f2be5b7be317115a60660aa8d414", "3277": "1c8a2e44fe230c77d8c724920b5b03e3a0c86993", "3442": "e5415f1ce600b4f9ff5352b64f1f991b843bcca0", "3462": "09f9d5b97c3e5552283b824b3a712d5312864538", "3477": "09e391014651162771c9d84a4b61639bebeceecf", "3487": "217551e2aff74378ff6a933893e9f21535f53f07", "3494": "af17a2ee70dd1a6df902d46e1a8c6807f93eeeff", "3509": "7a0ab8ec399a286423c7ac114c31efdc1a18e5b5", "3539": "faae53f5086a57379a796d0632acb48f1e3fbd78", "3549": "205a2875df12c3bd32a08165377678342b79f21a", "3556": "c5fcec251b7c2e6ea0d10235ad915c7c040c311d", "3557": "d2493247ca57d7d752c0a5c23a57612403ae8169", "3563": "85e270a62d7c9b38c9fde8daba44881a152b0ff8", "3566": "5ebcecd3dd37dae1465bc498a52f09b2995935f6", "3598": "d6c19841678bd97691b86438530d82b050ef7579", "3600": "ab3f3a76741c1b4895ebf1ff7d585ddb718e3542", "3602": "fd29606db7c95d2335850257eba0e9eaeb47c68d", "3617": "7796e4d3be9ad08e89ae144fc310ddff9e4fde5d", "3621": "0773fa487eb1be81eea1a402cc18ad024c782cba", "3623": "709422d738d8e3bd0885925705e7b2e1513f70fa", "3646": "ca6bf6d2da6e16aebd8e237fbaf2a3bdfc15a16f", "3648": "9dee5eaa7c4031d8d63f744f96db814a25d26665", "3690": "7c64bf5ef00b676468fdbd6a996a9f32147255b2", "3699": "1f96ffc9fecfe051bdd2431021b22e62da9e1851", "3707": "9f6d01b0d3f04edbc236c036b08e93107d5daf1f", "3709": "30147c35a7c25a2af6e7efbe7cbd014c99cd188b", "3746": "ce4ed67ba6c19e48aa53bab2eec91c8eb0df7d39", "3750": "9dc25e0925b540159148e8fd0e23f1c3cd0389e2", "3753": "2e6e4e5594e1635ea2e3d61a6f6e371487ffc07f", "3777": "668dfbb15262c0746282a8227f73337ba315f5d1", "3788": "ed7386ae1e4a33281acbd3bbe28bd11fca51f398", "3790": "9814495847c0713ddaba648f904ff2e962e83055", "3803": "f0b6dbf035ca50a660b8d47cf9d3679c5c862920", "3822": "936ddfdeb7c2aa15eae806b10509893f542322c0", "3830": "52dc0d05cd6f92f050edbfa2ba6871221412df33", "3833": "ce559c7f920da72b901d09cc15b1c519d118a840", "3855": "f8df642b35993fed28a18ac91f2f2686567f10dc", "3863": "a2a09b4de9eb603a0970da1bb948d76d254ed71f", "3865": "c841f812dad2e1119323be1840c375be50e844a5", "3871": "f0f13b5613426e51671143f64aedec75bff31fa5", "3876": "6461b0a7405d805a334bceb7834cf9abf3847f94", "3889": "2774fe91d5e1c131e69c63dce167b9172b23d615", "3896": "5488217ede36763aadfe6962cd530b7b23d3fca3", "3900": "16472f6bb60ae31f6d20793fcc71c160054df71f", "3937": "31f94e3384f8d4b52b7a025f7dc50afe32ee78e2", "3939": "6fd18de07275a55d0d0fd9c49ae6f401b67545b9", "3944": "89cd33e79dd3caaa056ffb0952cc5cfb13a544b5", "3945": "020fc743e5b5b8c1410e9907647e7ea2a6cc0884", "3948": "002e369c33d11ce4c0e2091c60efa06bc6272276", "3949": "203a0f0b382c149824cf081672a3fbc6fd60ecf5", "3971": "95c5d213e0d12280adbeee602fa1a85b212ba2c6", "4000": "438a5ad9ccf227bbed0c3b65f5d92aa0513c02b1", "4070": "9345e5553aac6a08fd0169fa3e1dfd238d372b3c", "4073": "bb2f3b3ce7e3c71e1e1e65911b0c57cffe65104c", "4075": "7a51fb8be97e05a8cce59ef094418dfc5caea6ef", "4096": "8a7b9f22069f58e825ecfd2586d2db52e5e72d5b", "4117": "36eea3dfdbb4394762ff7b67f4f7e5d5731b1a60", "4128": "acf8c90bcbd764947ecbd2db28574ef63c691f62", "4151": "a3763a73ba4aeb0414b1b6663a767ee661b39250", "4160": "3b1ef2dfdd1a23f00fb1b2207c6b71a00ca0e56e", "4253": "fe8a3405eff52cf8bfe157bc35fdcec6e7893099", "4277": "0e597959582e640b41a4a2ff649bd06b3f9b5ab7", "4281": "b338487cc68b91df578db4a9068222f59a59f313", "4304": "470b12cb1fcbd236b9df5cb4f53e94b031608c61", "4313": "6c71866fe84978eedeaec7cdbd657fdc15f1d5ea", "4368": "fad7055f6fe8f4e1582bba564e42192517c901d2", "4421": "46b82543b729c9c6f3c2438ae24d622709907e65", "4431": "047dfac7ab21b520529570740aae5efece5486cf"}, "revision_to_date": {"3": 1743990525000, "18": 1744310017000, "21": 1744901702000, "27": 1745590793000, "59": 1746119103000, "103": 1746661040000, "105": 1746664577000, "118": 1746721484000, "123": 1746723808000, "152": 1747086714000, "282": 1747751413000, "356": 1747958651000, "363": 1747988400000, "373": 1748018230000, "375": 1748018827000, "451": 1748297675000, "464": 1748317589000, "474": 1748393928000, "579": 1749116053000, "693": 1749716755000, "713": 1749812393000, "719": 1749817399000, "725": 1749842931000, "821": 1750187233000, "825": 1750229925000, "830": 1750232158000, "867": 1750259146000, "883": 1750338087000, "890": 1750750411000, "924": 1750840543000, "952": 1750929508000, "968": 1751032631000, "970": 1751034813000, "980": 1751060118000, "987": 1751274377000, "1001": 1751372015000, "1004": 1751384200000, "1013": 1751467902000, "1015": 1751468349000, "1138": 1751495228000, "1148": 1751554587000, "1153": 1751556620000, "1216": 1751912186000, "1250": 1751989323000, "1258": 1752016603000, "1279": 1752037395000, "1315": 1752144173000, "1334": 1752174055000, "1358": 1752225205000, "1361": 1752228354000, "1395": 1752281417000, "1406": 1752399523000, "1420": 1752465200000, "1475": 1752543885000, "1478": 1752562090000, "1484": 1752587009000, "1488": 1752593033000, "1492": 1752603441000, "1496": 1752604924000, "1498": 1752605763000, "1501": 1752608531000, "1504": 1752619953000, "1512": 1752634377000, "1526": 1752664160000, "1531": 1752683444000, "1533": 1752679061000, "1535": 1752689372000, "1538": 1752690708000, "1543": 1752704492000, "1578": 1752810863000, "1586": 1752857175000, "1588": 1752865938000, "1593": 1752888748000, "1600": 1753082350000, "1611": 1753126659000, "1613": 1753134753000, "1616": 1753131848000, "1617": 1753132131000, "1623": 1753158484000, "1633": 1753204022000, "1638": 1753202203000, "1639": 1753204237000, "1645": 1753234231000, "1665": 1753297147000, "1669": 1753310676000, "1671": 1753313408000, "1674": 1753320026000, "1727": 1753383610000, "1730": 1753388922000, "1732": 1753395033000, "1746": 1753469815000, "1788": 1753725228000, "1805": 1753813369000, "1807": 1753825967000, "1812": 1753915356000, "1834": 1753989656000, "1842": 1753997392000, "1855": 1754035437000, "1860": 1754041106000, "1862": 1754043176000, "1864": 1754059428000, "1867": 1754079816000, "1871": 1754238662000, "1880": 1754303691000, "1895": 1754430513000, "1907": 1754515911000, "1916": 1754558815000, "1924": 1754592845000, "1928": 1754644980000, "1932": 1754676976000, "1942": 1754925510000, "1945": 1754934307000, "1962": 1755019259000, "2003": 1755203850000, "2025": 1755272294000, "2058": 1755506100000, "2208": 1755660604000, "2218": 1755665627000, "2224": 1755676805000, "2264": 1755717009000, "2318": 1755729520000, "2348": 1755767384000, "2382": 1755797812000, "2384": 1755797878000, "2403": 1755833212000, "2429": 1755865657000, "2441": 1755878427000, "2493": 1755904353000, "2495": 1755904420000, "2503": 1755925255000, "2624": 1756188681000, "2629": 1756192730000, "2632": 1756197993000, "2643": 1756279537000, "2676": 1756312002000, "2684": 1756326657000, "2686": 1756334393000, "2709": 1756416778000, "2712": 1756420167000, "2719": 1756434862000, "2754": 1756497564000, "2758": 1756506489000, "2763": 1756516522000, "2768": 1756715896000, "2856": 1756987051000, "2864": 1756991458000, "2872": 1756998670000, "2905": 1757055132000, "2913": 1757058986000, "2929": 1757079283000, "2936": 1757093936000, "2974": 1757330563000, "2982": 1757356952000, "2990": 1757376945000, "3001": 1757406360000, "3006": 1757415009000, "3020": 1757422725000, "3031": 1757409977000, "3070": 1757539193000, "3073": 1757951533000, "3076": 1757958197000, "3089": 1757998926000, "3099": 1758023574000, "3102": 1758042279000, "3107": 1758054157000, "3137": 1758135354000, "3194": 1758235954000, "3222": 1758334331000, "3277": 1758607599000, "3442": 1758902631000, "3462": 1759114994000, "3477": 1759162716000, "3487": 1759165310000, "3494": 1759193082000, "3509": 1759216624000, "3539": 1759257695000, "3549": 1759272643000, "3556": 1759267285000, "3557": 1759267956000, "3563": 1759281603000, "3566": 1759286449000, "3598": 1759345442000, "3600": 1759347835000, "3602": 1759351478000, "3617": 1759384976000, "3621": 1759389221000, "3623": 1759391672000, "3646": 1759445558000, "3648": 1759449538000, "3690": 1759744984000, "3699": 1759767939000, "3707": 1759794207000, "3709": 1759533333000, "3746": 1759875784000, "3750": 1759877805000, "3753": 1759888650000, "3777": 1759939218000, "3788": 1759973344000, "3790": 1759975462000, "3803": 1759990677000, "3822": 1760026000000, "3830": 1760042564000, "3833": 1760056012000, "3855": 1760141670000, "3863": 1760160429000, "3865": 1760025183000, "3871": 1760221727000, "3876": 1760340594000, "3889": 1760368311000, "3896": 1760414828000, "3900": 1760460016000, "3937": 1760572667000, "3939": 1760575152000, "3944": 1760593150000, "3945": 1760593602000, "3948": 1760594013000, "3949": 1760594476000, "3971": 1760636586000, "4000": 1760740331000, "4070": 1761110116000, "4073": 1761111179000, "4075": 1761112190000, "4096": 1761151360000, "4117": 1761284615000, "4128": 1761297516000, "4151": 1761318170000, "4160": 1761530492000, "4253": 1761657196000, "4277": 1761732622000, "4281": 1761734599000, "4304": 1761760270000, "4313": 1761811763000, "4368": 1761847185000, "4421": 1761926599000, "4431": 1761941779000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC-Milan Processor", "Intel Xeon Processor (Icelake)"], "machine": ["adenzler-asv-runner", "ershi-asv", "ershi-asv-runner"], "num_cpu": ["32", "8"], "os": ["Linux 5.15.0-126-generic", "Linux 5.15.0-131-generic"], "ram": ["15984056", "16371128", "65836440"], "python": ["3.11", "3.12", "3.13"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel Xeon Processor (Icelake)", "machine": "ershi-asv-runner", "num_cpu": "8", "os": "Linux 5.15.0-131-generic", "ram": "16371128", "python": "3.12", "branch": "main"}, {"arch": "x86_64", "cpu": "AMD EPYC-Milan Processor", "machine": "adenzler-asv-runner", "num_cpu": "32", "os": "Linux 5.15.0-131-generic", "ram": "65836440", "python": "3.13", "branch": "main"}], "benchmarks": {"compilation.bench_example_load.SlowExampleBasicUrdf.time_load": {"code": "class SlowExampleBasicUrdf:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.basic.example_basic_urdf\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleBasicUrdf.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "5212ba785a2d013b8fc4b4fd1f0281ba23f65a10036f337e6abebdcd1784a35a", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleClothFranka.time_load": {"code": "class SlowExampleClothFranka:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.cloth.example_cloth_franka\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleClothFranka.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9a1d510bf84d0d2d4d3c68dc0b43f672866854e51df5b70071be0cc9a9aa37ee", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleClothTwist.time_load": {"code": "class SlowExampleClothTwist:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.cloth.example_cloth_twist\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleClothTwist.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2944bcd1d41a1d0755a46fab1ccbb2b38418c589a0ebb982702ba9be5bd32471", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleRobotAnymal.time_load": {"code": "class SlowExampleRobotAnymal:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_anymal_c_walk\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleRobotAnymal.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "30b4e830fd859608ff412e9052e49492eb804327e44f3cbedf4183876c171021", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleRobotCartpole.time_load": {"code": "class SlowExampleRobotCartpole:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_cartpole\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleRobotCartpole.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "71e2c9a9b0957497094f25a0b4dff3546059e17c249880ccff2c5a3dc09debf7", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleRobotHumanoid.time_load": {"code": "class SlowExampleRobotHumanoid:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_humanoid\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleRobotHumanoid.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "3d838883c58af639755f7dcfa6d7b6f603f4faefa35577421e70a41be5877518", "warmup_time": 0}, "setup.bench_model.FastInitializeModel.peakmem_initialize_model_cpu": {"code": "class FastInitializeModel:\n    def peakmem_initialize_model_cpu(self, robot, num_worlds):\n        gc.collect()\n    \n        with wp.ScopedDevice(\"cpu\"):\n            builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n            # finalize model\n            model = builder.finalize()\n    \n        del model\n\n    def setup_cache(self):\n        # Load a small model to cache the kernels\n        builder = Example.create_model_builder(\"cartpole\", 1, randomize=False, seed=123)\n        model = builder.finalize(device=\"cpu\")\n        del model", "name": "setup.bench_model.FastInitializeModel.peakmem_initialize_model_cpu", "param_names": ["robot", "num_worlds"], "params": [["'humanoid'", "'g1'", "'cartpole'"], ["256"]], "setup_cache_key": "setup.bench_model:125", "type": "peakmemory", "unit": "bytes", "version": "a7473dc081fbb914ac4fa9f1e7e5be2821d5847ec89f7cb912c05555ece87d4d"}, "setup.bench_model.FastInitializeModel.time_initialize_model": {"code": "class FastInitializeModel:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_model(self, robot, num_worlds):\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        _model = builder.finalize()\n        wp.synchronize_device()\n\n    def setup_cache(self):\n        # Load a small model to cache the kernels\n        builder = Example.create_model_builder(\"cartpole\", 1, randomize=False, seed=123)\n        model = builder.finalize(device=\"cpu\")\n        del model", "min_run_count": 1, "name": "setup.bench_model.FastInitializeModel.time_initialize_model", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'humanoid'", "'g1'", "'cartpole'"], ["256"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "setup.bench_model:125", "type": "time", "unit": "seconds", "version": "c443a475fe79ddf05a471ff6dd41b6902a1dca7225884afad7ab732c240e7119", "warmup_time": -1}, "setup.bench_model.FastInitializeSolver.time_initialize_solver": {"code": "class FastInitializeSolver:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_solver(self, robot, num_worlds):\n        self._solver = Example.create_solver(self._model, robot, use_mujoco_cpu=False)\n        wp.synchronize_device()\n\n    def setup(self, robot, num_worlds):\n        wp.init()\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()", "min_run_count": 1, "name": "setup.bench_model.FastInitializeSolver.time_initialize_solver", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'humanoid'", "'g1'", "'cartpole'"], ["256"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b2d1b17d4e4a010a2441d0d10b9b209c4884c57db6d16b718c8c9b5127f838a1", "warmup_time": -1}, "setup.bench_model.FastInitializeViewerGL.time_initialize_renderer": {"code": "class FastInitializeViewerGL:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_renderer(self, robot, num_worlds):\n        # Setting up the renderer\n        self.renderer = ViewerGL(headless=True)\n        self.renderer.set_model(self._model)\n    \n        wp.synchronize_device()\n        self.renderer.close()\n\n    def setup(self, robot, num_worlds):\n        wp.init()\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()", "min_run_count": 1, "name": "setup.bench_model.FastInitializeViewerGL.time_initialize_renderer", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'g1'"], ["256"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d9add5c09316bc748c3e612cc16cbd7f095ec18b01a1b27b1ea8e239cab0b94a", "warmup_time": -1}, "setup.bench_model.KpiInitializeModel.time_initialize_model": {"code": "class KpiInitializeModel:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_model(self, robot, num_worlds):\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        _model = builder.finalize()\n        wp.synchronize_device()\n\n    def setup(self, robot, num_worlds):\n        wp.init()", "min_run_count": 1, "name": "setup.bench_model.KpiInitializeModel.time_initialize_model", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'humanoid'", "'g1'", "'cartpole'"], ["8192"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "53272b20ee0eacff6fdbc0e21ce8b18aab7e4201a123fc59bc4606b6de60b08d", "warmup_time": -1}, "setup.bench_model.KpiInitializeSolver.time_initialize_solver": {"code": "class KpiInitializeSolver:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_solver(self, robot, num_worlds):\n        self._solver = Example.create_solver(self._model, robot, use_mujoco_cpu=False)\n        wp.synchronize_device()\n\n    def setup(self, robot, num_worlds):\n        wp.init()\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()", "min_run_count": 1, "name": "setup.bench_model.KpiInitializeSolver.time_initialize_solver", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'humanoid'", "'g1'", "'cartpole'", "'ant'"], ["8192"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "55e5ec342e9efdcb797c22fdcf5d25b898c00a14c8edbbaf90a3858b53683d50", "warmup_time": -1}, "setup.bench_model.KpiInitializeViewerGL.time_initialize_renderer": {"code": "class KpiInitializeViewerGL:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_renderer(self, robot, num_worlds):\n        # Setting up the renderer\n        self.renderer = ViewerGL(headless=True)\n        self.renderer.set_model(self._model)\n    \n        wp.synchronize_device()\n        self.renderer.close()\n\n    def setup(self, robot, num_worlds):\n        wp.init()\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()", "min_run_count": 1, "name": "setup.bench_model.KpiInitializeViewerGL.time_initialize_renderer", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'g1'"], ["8192"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2d33b796bb69aafb93c3c88f9a12b13808e8a5cdb6df7562ded097818f80b51c", "warmup_time": -1}, "simulation.bench_anymal.FastExampleAnymalPretrained.time_simulate": {"code": "class FastExampleAnymalPretrained:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 50\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames))", "min_run_count": 2, "name": "simulation.bench_anymal.FastExampleAnymalPretrained.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 3, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "29d871d361f5e50619ca9ee4af8ee5f22def523c03a5aa19b0365c23ecb5dd28", "warmup_time": -1}, "simulation.bench_cloth.FastExampleClothManipulation.time_simulate": {"code": "class FastExampleClothManipulation:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        newton.examples.run(self.example, args=None)\n    \n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 30\n        self.example = ExampleClothManipulation(ViewerNull(num_frames=self.num_frames))", "min_run_count": 2, "name": "simulation.bench_cloth.FastExampleClothManipulation.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 3, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "b3ceadbc55945ff4c6130a4fbcec6e455edc4e3085dd62f0e02103dbd33101ad", "warmup_time": -1}, "simulation.bench_cloth.FastExampleClothTwist.time_simulate": {"code": "class FastExampleClothTwist:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        newton.examples.run(self.example, None)\n    \n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 100\n        self.example = ExampleClothTwist(ViewerNull(num_frames=self.num_frames))", "min_run_count": 2, "name": "simulation.bench_cloth.FastExampleClothTwist.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 5, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "01dfa4b62b6e71ea72ece4c0c2371d26b1ba72a8ef8c94a900d8e40be3907293", "warmup_time": -1}, "simulation.bench_mujoco.FastAllegro.time_simulate": {"code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(\n                self.robot, self.num_worlds, randomize=self.random_init, seed=123\n            )\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=self.random_init,\n            headless=True,\n            actuation=\"None\",\n            use_cuda_graph=True,\n            builder=self.builder,\n            environment=self.environment,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastAllegro.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "13821b334a19fbc7b1a7333e1ef68506404d4e1fa9c7031bc46336537cea9c68", "warmup_time": -1}, "simulation.bench_mujoco.FastCartpole.time_simulate": {"code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(\n                self.robot, self.num_worlds, randomize=self.random_init, seed=123\n            )\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=self.random_init,\n            headless=True,\n            actuation=\"None\",\n            use_cuda_graph=True,\n            builder=self.builder,\n            environment=self.environment,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastCartpole.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 8, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "13821b334a19fbc7b1a7333e1ef68506404d4e1fa9c7031bc46336537cea9c68", "warmup_time": -1}, "simulation.bench_mujoco.FastG1.time_simulate": {"code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(\n                self.robot, self.num_worlds, randomize=self.random_init, seed=123\n            )\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=self.random_init,\n            headless=True,\n            actuation=\"None\",\n            use_cuda_graph=True,\n            builder=self.builder,\n            environment=self.environment,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastG1.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "13821b334a19fbc7b1a7333e1ef68506404d4e1fa9c7031bc46336537cea9c68", "warmup_time": -1}, "simulation.bench_mujoco.FastHumanoid.time_simulate": {"code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(\n                self.robot, self.num_worlds, randomize=self.random_init, seed=123\n            )\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=self.random_init,\n            headless=True,\n            actuation=\"None\",\n            use_cuda_graph=True,\n            builder=self.builder,\n            environment=self.environment,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastHumanoid.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 8, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "13821b334a19fbc7b1a7333e1ef68506404d4e1fa9c7031bc46336537cea9c68", "warmup_time": -1}, "simulation.bench_mujoco.FastKitchenG1.time_simulate": {"code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(\n                self.robot, self.num_worlds, randomize=self.random_init, seed=123\n            )\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=self.random_init,\n            headless=True,\n            actuation=\"None\",\n            use_cuda_graph=True,\n            builder=self.builder,\n            environment=self.environment,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastKitchenG1.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "13821b334a19fbc7b1a7333e1ef68506404d4e1fa9c7031bc46336537cea9c68", "warmup_time": -1}, "simulation.bench_mujoco.FastNewtonOverheadG1.track_simulate": {"code": "class _NewtonOverheadBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        trace = {}\n        with EventTracer(enabled=True) as tracer:\n            for _iter in range(self.samples):\n                example = Example(\n                    stage_path=None,\n                    robot=self.robot,\n                    randomize=self.random_init,\n                    headless=True,\n                    actuation=\"random\",\n                    num_worlds=num_worlds,\n                    use_cuda_graph=True,\n                    builder=self.builder[num_worlds],\n                    ls_iteration=self.ls_iteration,\n                )\n    \n                for _ in range(self.num_frames):\n                    example.step()\n                    trace = tracer.add_trace(trace, tracer.trace())\n    \n        step_time = trace[\"step\"][0]\n        mujoco_warp_step_time = trace[\"step\"][1][\"mujoco_warp_step\"][0]\n        overhead = 100.0 * (step_time - mujoco_warp_step_time) / step_time\n        return overhead\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.FastNewtonOverheadG1.track_simulate", "param_names": ["num_worlds"], "params": [["256"]], "type": "track", "unit": "%", "version": "f190c2aa963b9499b253447d6300eeff96be1d81b89c9e388d8ed69e4ae3d558"}, "simulation.bench_mujoco.FastNewtonOverheadHumanoid.track_simulate": {"code": "class _NewtonOverheadBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        trace = {}\n        with EventTracer(enabled=True) as tracer:\n            for _iter in range(self.samples):\n                example = Example(\n                    stage_path=None,\n                    robot=self.robot,\n                    randomize=self.random_init,\n                    headless=True,\n                    actuation=\"random\",\n                    num_worlds=num_worlds,\n                    use_cuda_graph=True,\n                    builder=self.builder[num_worlds],\n                    ls_iteration=self.ls_iteration,\n                )\n    \n                for _ in range(self.num_frames):\n                    example.step()\n                    trace = tracer.add_trace(trace, tracer.trace())\n    \n        step_time = trace[\"step\"][0]\n        mujoco_warp_step_time = trace[\"step\"][1][\"mujoco_warp_step\"][0]\n        overhead = 100.0 * (step_time - mujoco_warp_step_time) / step_time\n        return overhead\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.FastNewtonOverheadHumanoid.track_simulate", "param_names": ["num_worlds"], "params": [["256"]], "type": "track", "unit": "%", "version": "f190c2aa963b9499b253447d6300eeff96be1d81b89c9e388d8ed69e4ae3d558"}, "simulation.bench_mujoco.KpiAllegro.track_simulate": {"code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=self.random_init,\n                headless=True,\n                actuation=\"random\",\n                use_cuda_graph=True,\n                builder=self.builder[num_worlds],\n                ls_iteration=self.ls_iteration,\n                environment=self.environment,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_worlds * self.samples)\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiAllegro.track_simulate", "param_names": ["num_worlds"], "params": [["8192"]], "type": "track", "unit": "ms/world-step", "version": "62a2fd707ff553505c8e26bae864c53867d55fc0442b3c6429ccc112ee6b21ad"}, "simulation.bench_mujoco.KpiCartpole.track_simulate": {"code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=self.random_init,\n                headless=True,\n                actuation=\"random\",\n                use_cuda_graph=True,\n                builder=self.builder[num_worlds],\n                ls_iteration=self.ls_iteration,\n                environment=self.environment,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_worlds * self.samples)\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiCartpole.track_simulate", "param_names": ["num_worlds"], "params": [["8192"]], "type": "track", "unit": "ms/world-step", "version": "62a2fd707ff553505c8e26bae864c53867d55fc0442b3c6429ccc112ee6b21ad"}, "simulation.bench_mujoco.KpiG1.track_simulate": {"code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=self.random_init,\n                headless=True,\n                actuation=\"random\",\n                use_cuda_graph=True,\n                builder=self.builder[num_worlds],\n                ls_iteration=self.ls_iteration,\n                environment=self.environment,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_worlds * self.samples)\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiG1.track_simulate", "param_names": ["num_worlds"], "params": [["8192"]], "timeout": 900, "type": "track", "unit": "ms/world-step", "version": "62a2fd707ff553505c8e26bae864c53867d55fc0442b3c6429ccc112ee6b21ad"}, "simulation.bench_mujoco.KpiHumanoid.track_simulate": {"code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=self.random_init,\n                headless=True,\n                actuation=\"random\",\n                use_cuda_graph=True,\n                builder=self.builder[num_worlds],\n                ls_iteration=self.ls_iteration,\n                environment=self.environment,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_worlds * self.samples)\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiHumanoid.track_simulate", "param_names": ["num_worlds"], "params": [["8192"]], "type": "track", "unit": "ms/world-step", "version": "62a2fd707ff553505c8e26bae864c53867d55fc0442b3c6429ccc112ee6b21ad"}, "simulation.bench_mujoco.KpiKitchenG1.track_simulate": {"code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=self.random_init,\n                headless=True,\n                actuation=\"random\",\n                use_cuda_graph=True,\n                builder=self.builder[num_worlds],\n                ls_iteration=self.ls_iteration,\n                environment=self.environment,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_worlds * self.samples)\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiKitchenG1.track_simulate", "param_names": ["num_worlds"], "params": [["512"]], "timeout": 900, "type": "track", "unit": "ms/world-step", "version": "62a2fd707ff553505c8e26bae864c53867d55fc0442b3c6429ccc112ee6b21ad"}, "simulation.bench_mujoco.KpiNewtonOverheadG1.track_simulate": {"code": "class _NewtonOverheadBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        trace = {}\n        with EventTracer(enabled=True) as tracer:\n            for _iter in range(self.samples):\n                example = Example(\n                    stage_path=None,\n                    robot=self.robot,\n                    randomize=self.random_init,\n                    headless=True,\n                    actuation=\"random\",\n                    num_worlds=num_worlds,\n                    use_cuda_graph=True,\n                    builder=self.builder[num_worlds],\n                    ls_iteration=self.ls_iteration,\n                )\n    \n                for _ in range(self.num_frames):\n                    example.step()\n                    trace = tracer.add_trace(trace, tracer.trace())\n    \n        step_time = trace[\"step\"][0]\n        mujoco_warp_step_time = trace[\"step\"][1][\"mujoco_warp_step\"][0]\n        overhead = 100.0 * (step_time - mujoco_warp_step_time) / step_time\n        return overhead\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiNewtonOverheadG1.track_simulate", "param_names": ["num_worlds"], "params": [["8192"]], "timeout": 900, "type": "track", "unit": "%", "version": "f190c2aa963b9499b253447d6300eeff96be1d81b89c9e388d8ed69e4ae3d558"}, "simulation.bench_mujoco.KpiNewtonOverheadHumanoid.track_simulate": {"code": "class _NewtonOverheadBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_worlds):\n        trace = {}\n        with EventTracer(enabled=True) as tracer:\n            for _iter in range(self.samples):\n                example = Example(\n                    stage_path=None,\n                    robot=self.robot,\n                    randomize=self.random_init,\n                    headless=True,\n                    actuation=\"random\",\n                    num_worlds=num_worlds,\n                    use_cuda_graph=True,\n                    builder=self.builder[num_worlds],\n                    ls_iteration=self.ls_iteration,\n                )\n    \n                for _ in range(self.num_frames):\n                    example.step()\n                    trace = tracer.add_trace(trace, tracer.trace())\n    \n        step_time = trace[\"step\"][0]\n        mujoco_warp_step_time = trace[\"step\"][1][\"mujoco_warp_step\"][0]\n        overhead = 100.0 * (step_time - mujoco_warp_step_time) / step_time\n        return overhead\n\n    def setup(self, num_worlds):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_worlds not in self.builder:\n            self.builder[num_worlds] = Example.create_model_builder(\n                self.robot, num_worlds, randomize=self.random_init, seed=123\n            )", "name": "simulation.bench_mujoco.KpiNewtonOverheadHumanoid.track_simulate", "param_names": ["num_worlds"], "params": [["8192"]], "type": "track", "unit": "%", "version": "f190c2aa963b9499b253447d6300eeff96be1d81b89c9e388d8ed69e4ae3d558"}, "simulation.bench_quadruped_xpbd.FastExampleQuadrupedXPBD.time_simulate": {"code": "class FastExampleQuadrupedXPBD:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 1000\n        self.example = Example(newton.viewer.ViewerNull(num_frames=self.num_frames), 200)", "min_run_count": 2, "name": "simulation.bench_quadruped_xpbd.FastExampleQuadrupedXPBD.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 10, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8527e31e794cfba679aafd4d750232df62492b0b836ab15cdad57ab6c92db2dc", "warmup_time": -1}, "simulation.bench_selection.FastExampleSelectionCartpoleMuJoCo.time_simulate": {"code": "class FastExampleSelectionCartpoleMuJoCo:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 200\n        self.example = Example(\n            viewer=newton.viewer.ViewerNull(num_frames=self.num_frames), num_worlds=16, verbose=False\n        )", "min_run_count": 2, "name": "simulation.bench_selection.FastExampleSelectionCartpoleMuJoCo.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 10, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "adc93f1285ec796ed3088445a10636624dd2a89b99b5c90bcbb42add8c9087df", "warmup_time": -1}, "simulation.bench_viewer.FastViewerGL.time_rendering_frame": {"code": "class FastViewerGL:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_rendering_frame(self, robot, num_worlds):\n        # Rendering one frame\n        self.renderer.begin_frame(0.0)\n        self.renderer.log_state(self._state)\n        self.renderer.end_frame()\n        wp.synchronize_device()\n\n    def setup(self, robot, num_worlds):\n        wp.init()\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()\n        self._state = self._model.state()\n    \n        # Setting up the renderer\n        self.renderer = ViewerGL(headless=True)\n        self.renderer.set_model(self._model)", "min_run_count": 1, "name": "simulation.bench_viewer.FastViewerGL.time_rendering_frame", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'g1'"], ["256"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a7320c2bfd979f20a9efbe3c6bcb6cbe8daf027c03fbeea90667301702873854", "warmup_time": -1}, "simulation.bench_viewer.KpiViewerGL.time_rendering_frame": {"code": "class KpiViewerGL:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_rendering_frame(self, robot, num_worlds):\n        # Rendering one frame\n        self.renderer.begin_frame(0.0)\n        self.renderer.log_state(self._state)\n        self.renderer.end_frame()\n        wp.synchronize_device()\n\n    def setup(self, robot, num_worlds):\n        wp.init()\n        builder = Example.create_model_builder(robot, num_worlds, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()\n        self._state = self._model.state()\n    \n        # Setting up the renderer\n        self.renderer = ViewerGL(headless=True)\n        self.renderer.set_model(self._model)", "min_run_count": 1, "name": "simulation.bench_viewer.KpiViewerGL.time_rendering_frame", "number": 1, "param_names": ["robot", "num_worlds"], "params": [["'g1'"], ["8192"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9705f69f1cdc6900bdaef46555562d3ad19312423237a52028f380687c7c359d", "warmup_time": -1}}, "machines": {"ershi-asv-runner": {"arch": "x86_64", "cpu": "Intel Xeon Processor (Icelake)", "machine": "ershi-asv-runner", "num_cpu": "8", "os": "Linux 5.15.0-131-generic", "ram": "16371128", "version": 1}, "adenzler-asv-runner": {"arch": "x86_64", "cpu": "AMD EPYC-Milan Processor", "machine": "adenzler-asv-runner", "num_cpu": "32", "os": "Linux 5.15.0-131-generic", "ram": "65836440", "version": 1}, "ershi-asv": {"arch": "x86_64", "cpu": "Intel Xeon Processor (Icelake)", "machine": "ershi-asv", "num_cpu": "8", "os": "Linux 5.15.0-126-generic", "ram": "15984056", "version": 1}}, "tags": {"alpha-0": 2429, "alpha-1": 2441, "beta-0.1.2": 3277, "beta-0.1.3": 3442, "beta-1-0": 3137, "beta-1-1": 3222}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}